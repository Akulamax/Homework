#include <iostream>
#include <math.h>
using namespace std;

class Complex         // класс "Комплексное число"
{
private:
  double re, im;      // действительная и мнимая части

public:
  // конструкторы

  Complex ()
  {
  };

  Complex (double r)
  {
    re = r;
    im = 0;
  }

  Complex (double r, double i)
  {
    re = r;
    im = i;
  }

  Complex (const Complex &c)   // конструктор копирования
  {
    re = c.re;
    im = c.im;
  }

  // деструктор
  ~Complex ()
  {
  }

  // остальные функции

  // Модуль комплексного числа
  double abs (Complex &c)
  {
    return sqrt (re * re + im * im);
  }

  // оператор присваивания
  Complex& operator = (Complex &c)
  {
    re = c.re;
    im = c.im;

    return *this;
  }

  // оператор +=
  Complex& operator += (Complex &c)
  {
    re += c.re;
    im += c.im;
    return *this;
  }
   Complex operator + ( Complex &c)
  {
    return Complex (re + c.re, im + c.im);
  }
  Complex operator *( Complex &c)
{
    return Complex(re*c.re - im*c.im, re*c.im - im*c.re);
}
 Complex operator~()
{
    return Complex(re, -im);
}
Complex operator / ( Complex &c)
  {
    Complex temp;
    double r = c.re * c.re + c.im * c.im;
    temp.re = (re * c.re + im * c.im) / r;
    temp.im = (im * c.re - re * c.im) / r;
    return temp;
  }
  bool operator== ( Complex& c)
{
    return (re == c.re && im == c.im);
}
 friend ostream & operator<< (ostream &, const Complex &);
  friend istream & operator>> (istream &, Complex &);

 };
   ostream& operator<< (ostream &out, const Complex &c)
{
  out << "(" << c.re << ", " << c.im << ")";
  return out;
}
istream& operator>> (istream &in, Complex &c)
{
  in >> c.re >> c.im;
  return in;
}

int
main ()
{
  Complex a (5, 2);
  Complex b (3, -3);
  Complex l (1, 1);

  cout << "a = " << a << "; b =" << b << endl;

  Complex c = a + b;
  Complex f = a;
     a+=b;
     Complex abs (b);
     cout << c << endl;
      cout <<  a << endl;
       cout << f << endl;
        cout << a*b << endl;
         cout << ~l << endl;
          cout << a/b << endl;
           cout << b << endl;
              if (a==b) cout<<1;
              else cout<<0;

  return 0;
}
